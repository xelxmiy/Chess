package chess.Forms;

import chess.StyleClasses.StyleManager;
import java.awt.Component;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import chess.Chess;
import chess.StyleClasses.ChessButton;
import chess.chesspieces.Bishop;
import chess.chesspieces.Knight;
import chess.chesspieces.Queen;
import chess.chesspieces.Rook;

/**
 * The Place where the magic happens. This frame contains the board the game is
 * played on.
 *
 * @author Adam Belski
 * @since 07-Jun-2023
 * @version 1.0.2
 */
public class GameFrame extends javax.swing.JFrame {

    /**
     * Creates new form GameFrame
     */
    public GameFrame() {
        initComponents();
        setIconImage();
        initPromotionButtons();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gameboardPanel = new javax.swing.JPanel();
        backgroundPanel = new javax.swing.JPanel();
        darkTimer = new javax.swing.JLabel();
        lightTimer = new javax.swing.JLabel();
        startButton = new ChessButton()
        ;

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Chess");
        setBackground(StyleManager.jPanelAccents);
        setName("MainFrame"); // NOI18N
        setResizable(false);
        getContentPane().setLayout(null);

        gameboardPanel.setBackground(StyleManager.jPanelBackground);
        gameboardPanel.setBorder(StyleManager.BORDER);
        gameboardPanel.setForeground(StyleManager.WHITE
        );
        gameboardPanel.setLayout(null);
        getContentPane().add(gameboardPanel);
        gameboardPanel.setBounds(0, 0, 720, 720);

        backgroundPanel.setBackground(StyleManager.jPanelBackground);
        backgroundPanel.setLayout(null);

        darkTimer.setBackground(StyleManager.darkCell);
        darkTimer.setFont(StyleManager.TITLE_FONT);
        darkTimer.setForeground(StyleManager.WHITE);
        darkTimer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        darkTimer.setText(Chess.blackTimer.minsCounter + ":" + Chess.blackTimer.secondsCounter);
        darkTimer.setBorder(StyleManager.BORDER);
        darkTimer.setOpaque(true);
        backgroundPanel.add(darkTimer);
        darkTimer.setBounds(0, 0, 360, 160);

        lightTimer.setBackground(StyleManager.lightCell);
        lightTimer.setFont(StyleManager.TITLE_FONT);
        lightTimer.setForeground(StyleManager.WHITE);
        lightTimer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lightTimer.setText(Chess.lightTimer.minsCounter + ":" + Chess.lightTimer.secondsCounter);
        lightTimer.setBorder(StyleManager.BORDER);
        lightTimer.setOpaque(true);
        backgroundPanel.add(lightTimer);
        lightTimer.setBounds(0, 560, 360, 160);

        startButton.setBackground(StyleManager.chessButtonUnpressed);
        startButton.setForeground(StyleManager.WHITE);
        startButton.setText("Start!");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });
        backgroundPanel.add(startButton);
        startButton.setBounds(0, 280, 360, 160);

        getContentPane().add(backgroundPanel);
        backgroundPanel.setBounds(720, 0, 360, 720);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        Chess.gameIsRunning = true;
        startButton.setVisible(false);
    }//GEN-LAST:event_startButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel backgroundPanel;
    private static javax.swing.JLabel darkTimer;
    public static javax.swing.JPanel gameboardPanel;
    private static javax.swing.JLabel lightTimer;
    private javax.swing.JButton startButton;
    // End of variables declaration//GEN-END:variables
    public static ChessButton queenButton;
    public static ChessButton rookButton;
    public static ChessButton knightButton;
    public static ChessButton bishopButton;

    public static int pRow;
    public static int pColumn;

    /**
     * give <code>gamePabel</code> a component
     *
     * @param c component to add to the gamePanel
     */
    public static void giveComponentToGameBoardPanel(Component c) {
        gameboardPanel.add(c);
    }

    /**
     * sets the icon for the JFrame
     */
    private void setIconImage() {
        try {
            File IconImagePath
                    = new File("src\\images\\icon.png");
            IconImagePath.getAbsolutePath();
            Image iconImage = ImageIO.read(IconImagePath);
            this.setIconImage(iconImage);
        } catch (IOException ex) {
        }
    }

    /**
     * updates the timers
     */
    public static void UpdateTimer() {
        lightTimer.setText(Chess.lightTimer.minsCounter + ":" + Chess.lightTimer.secondsCounter);
        darkTimer.setText(Chess.blackTimer.minsCounter + ":" + Chess.blackTimer.secondsCounter);
    }

    /**
     * Initializes the promotion buttons when a pawn reaches the enemies back
     * row!
     */
    private void initPromotionButtons() {
        queenButton = new ChessButton();
        rookButton = new ChessButton();
        knightButton = new ChessButton();
        bishopButton = new ChessButton();

        queenButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queenButtonActionPreformed();
            }
        });

        backgroundPanel.add(queenButton);
        queenButton.setBounds(0, 160, 180, 200);
        queenButton.setImage(!(pRow == 7) ? StyleManager.lightQueenImg
                : StyleManager.darkQueenImg);
        queenButton.setVisible(false);

        rookButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rookButtonActionPreformed();
            }
        });

        backgroundPanel.add(rookButton);
        rookButton.setBounds(180, 160, 180, 200);
        rookButton.setImage(!(pRow == 7) ? StyleManager.lightRookImg
                : StyleManager.darkRookImg);
        rookButton.setVisible(false);

        bishopButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bishopButtonActionPreformed();
            }

        });

        backgroundPanel.add(bishopButton);
        bishopButton.setBounds(180, 360, 180, 200);
        bishopButton.setImage(!(pRow == 7) ? StyleManager.lightBishopImg
                : StyleManager.darkBishopImg);
        bishopButton.setVisible(false);
        knightButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                knightButtonActionPreformed();
            }
        });

        backgroundPanel.add(knightButton);
        knightButton.setBounds(0, 360, 180, 200);
        knightButton.setImage(!(pRow == 7) ? StyleManager.lightKnightImg
                : StyleManager.darkKnightImg);
        knightButton.setVisible(false);
    }

    /**
     * preformed when the queen's promotion button is pressed
     */
    private void queenButtonActionPreformed() {
        Chess.board.set(pRow, pColumn, new Queen(pRow, pColumn, !(pRow == 7)));
        makeButtonsInvisble();
    }

    /**
     * preformed when the rook's promotion button is pressed
     */
    private void rookButtonActionPreformed() {
        Chess.board.set(pRow, pColumn, new Rook(pRow, pColumn, !(pRow == 7)));
        makeButtonsInvisble();
    }

    /**
     * preformed when the bishop's promotion button is pressed
     */
    private void bishopButtonActionPreformed() {
        Chess.board.set(pRow, pColumn, new Bishop(pRow, pColumn, !(pRow == 7)));
        makeButtonsInvisble();
    }
    /**
     * preformed when the knight's promotion button is pressed
     */
    private void knightButtonActionPreformed() {
        Chess.board.set(pRow, pColumn, new Knight(pRow, pColumn, !(pRow == 7)));
        makeButtonsInvisble();
    }
    /**
     * hides the promotion buttons once one has been pressed
     */
    private void makeButtonsInvisble() {
        queenButton.setVisible(false);
        rookButton.setVisible(false);
        bishopButton.setVisible(false);
        knightButton.setVisible(false);
        Chess.gameIsRunning = true;
    }

    public static void makePromotionButtonsVisible(int pRow, int pColumn) {
        GameFrame.pRow = pRow;
        GameFrame.pColumn = pColumn;
        queenButton.setVisible(true);
        rookButton.setVisible(true);
        bishopButton.setVisible(true);
        knightButton.setVisible(true);
    }
}
